# nginx.conf configuration
# https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts

# set the user to nginx
# removed as we aren't running as root
# user                    nginx;

# limit the number of worker processes if necessary
# gunicorn: set worker_processes to 1 
worker_processes        1;
# worker_processes        auto;

# where error logs are logged
error_log               /var/log/nginx/error.log error;

# where the process are kept
# pid                     /var/run/nginx.pid;
# running nginx as non-root
pid                     /tmp/nginx.pid;

# max simultaneous connections per worker process
events {
    worker_connections  1024;
    # gunicorn: set to 'on' if nginx worker_processes > 1
    # accept_mutex off;
}

http {

    # supply mimetypes to nginx
    include /etc/nginx/mime.types;
    # use default mimetype if unknown
    default_type application/octet-stream;

    # how logs are formatted(named main)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # where access logs are stored(uses main)
    access_log /var/log/nginx/access.log main;

    # allow nginx to send files without copying to user space
    sendfile on;

    # how long to wait on client before closing connection
    keepalive_timeout 65;

    # hide version on error pages
    server_tokens off;

    # hide some headers sent that expose version and host
    proxy_hide_header X-Powered-By;

    # Include any other specific configuration files you might need
    include /etc/nginx/conf.d/*.conf;

    # path to root folder(not sure what this is for)
    root /usr/share/nginx/html/;

    # running an nginx container as non-root may require relocating these to an accessible folder
    client_body_temp_path /tmp/client_temp;
    proxy_temp_path       /tmp/proxy_temp_path;
    fastcgi_temp_path     /tmp/fastcgi_temp;
    uwsgi_temp_path       /tmp/uwsgi_temp;
    scgi_temp_path        /tmp/scgi_temp;

    # define a rate limit by remote(ip) address(10m = 10MB, about 160k addresses, 10 requests per second)
    limit_req_zone $binary_remote_addr zone=primlimit:10m rate=10r/s;

    # define a rate limit by remote(ip) address(10m = 10MB, about 160k addresses, 10 requests per second)
    limit_req_zone $binary_remote_addr zone=apilimit:10m rate=20r/m;

    # to define multiple servers to distribute requests to
    # to use, define a location block with `proxy_pass http://app_server;`
    # you could just define `proxy_pass http://host:port;` directly in the location block instead
    upstream app_server {
      
        # list of servers to send traffic to
        # different properties for each server, weight=5 means it will be prioritized
        # server host1:port           weight=5;
        # server host2:port;
        # server backup1.host1:port   backup;

        # when using docker, docker dns will automatically resolve the service name to the container
        server rateapi:3000 fail_timeout=0;
        # if you arent inside of a container you can use the host:port directly
        # server 127.0.0.1:3000 fail_timeout=0;
        # to send traffic to a unix socket
        # server unix:/run/gunicorn/gunicorn.sock fail_timeout=0;
    }


    # server blocks resolve the host and port(host:port)
    # if you want to resolve different host:port to different folders on the server use a server block
    # if you want to resolve different paths(host:port/this_part) to different folders on the server use a location block
    # localhost: all served from the same host(127.0.0.1), use location blocks or different ports

    
    server {
        listen 80 default_server; # ssl default server
        return 301 https://$host$request_uri;
    }

    server {
        # default_server should only be enabled for 1 server;
        # listen 80 default_server;

        # enable ssl: port 80 above should be commented out and the 80 server block should be moved outside of this one to redirect traffic
        listen 443 ssl;
        listen [::]:443 ssl ipv6only=on;

        # ssl certificate locations
        ssl_certificate /etc/nginx/ssl/${DOC_DOMAIN}/domain.cert.pem;
        ssl_certificate_key /etc/nginx/ssl/${DOC_DOMAIN}/private.key.pem;

        # ssl configuration
        ssl_protocols TLSv1.3 TLSv1.2;

        # this is used if the host:port matches multiple servers
        server_name ${DOC_DOMAIN};

        # what files should nginx look for
        index index.html;

        # path to root folder(not sure what this is for but it needs to be set for hosting multiple domains)
        root /usr/share/nginx/html;

        # global security headers
        # disabled until ssl is configured
        # add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        # disabled as we need to be able to load remote content like chartjs and google fonts
        # add_header Content-Security-Policy "default-src 'self'";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        # api location block serving a proxy pass when someone visits `127.0.0.1:3000/api`
        # more specific blocks should be higher up
        location /api {
            # set rate limit
            limit_req zone=apilimit burst=3;
            
            # proxy api calls to the local api server
            proxy_pass http://app_server;

            # # proxy api calls to the live rateapi service instead of the local one
            # proxy_pass https://live-example.com;
            # proxy_ssl_server_name on;
            # proxy_set_header Host live-example.com;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;

            # try_files $uri $uri/ =404;
        }

        # location blocks resolve the uri(part after the host:port)
        # can contain root or alias to specify a folder on the server
        location / {
            # set rate limit
            limit_req zone=primlimit burst=20 nodelay;
            # root or alias are optional if you are moving to a specific folder that isnt in the path(uri)
            # alias: if someone goes to host:port/location
            # alias: nginx will serve files from the alias folder
            # alias /usr/share/nginx/html/;
            alias /usr/share/nginx/html/${DOC_DOMAIN}/;
            # root: if someone goes to host:port/location
            # root: nginx will serve files from host:port/root_path(inside location block)/location
            # root /usr/share/nginx/html/;

            # how to resolve the uri(try the uri by itself, then uri/, then go to 404)
            try_files $uri $uri/ =404;
        }
    }
}